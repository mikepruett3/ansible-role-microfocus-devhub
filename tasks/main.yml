---
- name: "Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined

- name: "Host Setup/Changes"
  block:
  - name: "Disable SELinux"
    selinux:
      state: disabled
    register: reboot
  - name: "Add hosts entry for local host IP address"
    ansible.builtin.lineinfile:
      path: /etc/hosts
      insertafter: EOF
      line: "{{ ansible_default_ipv4.address }} {{ inventory_hostname }}  {{ inventory_hostname.split('.')[0] }}"
  - name: "Set systems Hostname"
    ansible.builtin.hostname:
      name: "{{ inventory_hostname }}"
    register: hostname
  - name: "Retrieve /tmp mount point Source"
    shell: findmnt --fstab --target '/tmp' | tail -n 1 | awk '{ print $2 }'
    register: src
  - name: "Retrieve /tmp mount point FSType"
    shell: findmnt --fstab --target '/tmp' | tail -n 1 | awk '{ print $3 }'
    register: fstype
  - name: "Retrieve /tmp mount point Options"
    shell: findmnt --fstab --target '/tmp' | tail -n 1 | awk '{ print $4 }'
    register: opts
  - name: "Configure default mount options on /tmp mount point"
    mount:
      path: /tmp
      src: "{{ src.stdout|string }}"
      fstype: "{{ fstype.stdout|string }}"
      opts: defaults
      state: mounted
    when: opts.stdout != "defaults"
  - name: "Reboot host"
    ansible.builtin.reboot:
    when: reboot.reboot_required or hostname.changed

- name: "Install required packages"
  block:
    - name: "Install required packages, if not already installed (RHEL7)"
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - pax
        - ksh
        - flex
        - flex-devel
        - flex-devel.i686
        - glibc
        - glibc.i686
        - libgcc
        - libgcc.i686
        - libstdc++
        - libstdc++.i686
        - glibc-devel
        - glibc-devel.i686
      when:
        - "item|string not in ansible_facts.packages"
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version <= '7'
    - name: "Install required packages, if not already installed (RHEL8)"
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - spax
        - ksh
        - flex
        - glibc.i686
        - libgcc.i686
        - libstdc++.i686
        - glibc-devel.i686
      when:
        - "item|string not in ansible_facts.packages"
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version == '8'

- name: "Setup Service Account"
  block:
    - name: "Collect stats for service users homedir"
      ansible.builtin.stat:
        path: "{{ service_homedir }}"
      register: path
    - name: "Test service users homedir existence"
      ansible.builtin.fail:
        msg: "Path {{ service_homedir }} does not exist on {{ inventory_hostname }}!"
      when: not path.stat.exists or not path.stat.isdir
    - name: "Create service users group"
      ansible.builtin.group:
        name: "{{ service_group }}"
        state: present
    - name: "Create service user"
      ansible.builtin.user:
        name: "{{ service_user }}"
        group: "{{ service_group }}"
        home: "{{ service_homedir }}/{{ service_user }}"
        generate_ssh_key: yes
        ssh_key_type: "{{ ssh_key_type }}"
        ssh_key_comment: "{{ service_user }}@{{ inventory_hostname }}"
        state: present
    - name: "Create required directories in the service users homedir"
      ansible.builtin.file:
        path: "{{ service_homedir }}/{{ service_user }}/{{ item }}"
        owner: "{{ service_user }}"
        group: "{{ service_group }}"
        state: directory
      with_items:
        - "data"
        - "data/tmp"
        - "udata"
        - "udata/tmp"

- name: "Create software directory under root homedir, if it does not exist"
  ansible.builtin.file:
    path: "/root/software/"
    state: directory

- name: "Download installer package from local repository"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/{{ package_name }}"
    validate_certs: no
    mode: 0777

- name: "Collect package inventory from yum"
  ansible.builtin.package:
    list: "jdk"
  register: yum_list

- name: "Test if Oracle Java Development Kit (JDK) installed"
  ansible.builtin.fail:
    msg: "Oracle Java Development Kit (JDK) not installed!"
  when: yum_list.results | selectattr("yumstate", "match", "installed") | list | length == 0

- name: "Install Micro Focus COBOL DevHub Server (CentOS)"
  command: ./{{ package_name }} -ESadminID={{ service_user|quote }} -installlocation="{{ install_dir | quote }}" -IacceptEULA -noplatformcheck
  args:
    chdir: "/root/software/"
    creates: "/opt/microfocus/VisualCOBOL-DevHub/bin/cob64"
  when: ansible_distribution == 'CentOS'

- name: "Install Micro Focus COBOL DevHub Server (RHEL)"
  command: ./{{ package_name }} -ESadminID={{ service_user|quote }} -installlocation="{{ install_dir | quote }}" -IacceptEULA
  args:
    chdir: "/root/software/"
    creates: "/opt/microfocus/VisualCOBOL-DevHub/bin/cob64"
  when: ansible_distribution == 'RedHat'